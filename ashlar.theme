<?php

/**
 * @file
 * Functions to support theming in Ashlar.
 */

/**
 * Implements hook_page_attachments_alter().
 */
function ashlar_page_attachments_alter(array &$attachments) {

  $siteimprove = <<<'SITEIMPROVE'
(function() {var sz = document.createElement('script');sz.type = 'text/javascript';sz.async = true;sz.src = '//siteimproveanalytics.com/js/siteanalyze_66356517.js';var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(sz, s);})();
SITEIMPROVE;

  if (theme_get_setting('siteimprove_tracking')) {
    $attachments['#attached']['html_head'][] = array(
      array(
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => $siteimprove,
      ),
      'siteimprove',
    );
  }

  if (theme_get_setting('vimeo_tracking')) {
    $attachments['#attached']['library'][] = 'ashlar/vimeo-tracking';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ashlar_preprocess_page(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $variables['alert_display'] = (bool) theme_get_setting('alert_display');
}

/**
 * Implements hook_preprocess_block().
 */
function ashlar_preprocess_block(&$variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['block_content'] = $variables['elements']['content']['#block_content'];
  }
}

/**
 * Implements hook_preprocess_field().
 */
function ashlar_preprocess_field(&$variables) {
  $entity_type = $variables['entity_type'];
  $field_type = $variables['field_type'];
  $field_name = $variables['field_name'];
  $element = $variables['element'];
  $object = $element['#object'];
  $bundle = $element['#bundle'];

  if ($object->hasField('field_custom_classes')) {
    _ashlar_set_custom_classes($variables['items'], $object);
  }

  if ($field_type === 'link') {
    if ($object->hasField('field_tracking_event_enable')) {
      $variables['#attached']['library'][] = 'ashlar/event-tracking';
      _ashlar_set_tracking_event_enable($variables['items'], $object);
    }

    if ($object->hasField('field_tracking_event_category')) {
      $variables['#attached']['library'][] = 'ashlar/event-tracking';
      _ashlar_set_tracking_event_category($variables['items'], $object);
    }

    if ($object->hasField('field_tracking_event_label')) {
      _ashlar_set_tracking_event_label($variables['items'], $object);
    }

    if ($object->hasField('field_icon')) {
      $variables['#attached']['library'][] = 'ashlar/material-icons';  
      _ashlar_set_icon($variables['items'], $object);      
    }

    if ($bundle === 'button') {
      _ashlar_set_cta_class($variables['items'], $object);
    }

    if ($bundle === 'page_menu') {
      _ashlar_set_current_page($variables['items']);
    }
  }

  //Invoke acalog code when the when body is present and matches 'acalog'
  if(!empty($variables['items']['0']['content']['#text'])){
    if($variables['element']['#field_name'] === 'body') {
      if(strpos($variables['items']['0']['content']['#text'], 'acalog') !== false) {
        $variables['#attached']['library'][] = 'ashlar/acalog';
      }
    }
  }
}

/**
 * Helper function, adds current page info to page menu block links
 */
function _ashlar_set_current_page(&$items) {
  $current_path = \Drupal::request()->getRequestUri();
  foreach ($items as &$item) {
    if ($item['content']['#url']->toString() === $current_path) {
      $item['content']['is_active_page'] = true;
    }
  }
}

/**
 * Helper function to add custom classes to a block
 */
function _ashlar_set_custom_classes(&$items, $object) {
  if (!$object->field_custom_classes->isEmpty()) {
    foreach ($items as &$item) {
      $item['content']['#options']['attributes']['class'][] = $object->field_custom_classes->value;
    }
  }
}

/**
 * Helper function to add cta class to links
 */
function _ashlar_set_cta_class(&$items, $object) {
  foreach ($items as &$item) {
    $item['content']['#options']['attributes']['class'][] = 'cta';
  }
}

/**
 * Helper function to add tracking event attribute to field.
 */
function _ashlar_set_tracking_event_enable(&$items, $object) {
  if (!$object->field_tracking_event_enable->isEmpty()) {
    foreach ($items as &$item) {
      $item['content']['#options']['attributes']['data-tracking-event-enable'] = '';
    }
  }
}

/**
 * Helper function to add tracking event category attribute to field.
 */
function _ashlar_set_tracking_event_category(&$items, $object) {
  if (!$object->field_tracking_event_category->isEmpty()) {
    foreach ($items as &$item) {
      $item['content']['#options']['attributes']['data-tracking-event-category'] = $object->field_tracking_event_category->value;
    }
  }
}

/**
 * Helper function to add tracking event label attribute to field.
 */
function _ashlar_set_tracking_event_label(&$items, $object) {
  if (!$object->field_tracking_event_label->isEmpty()) {
    foreach ($items as &$item) {
      $item['content']['#options']['attributes']['data-tracking-event-label'] = $object->field_tracking_event_label->value;
    }
  }
}

/**
 * Helper function to add icons to cta link markup
 */
function _ashlar_set_icon(&$items, $object) {  
  if (!$object->field_icon->isEmpty()) {          
    foreach ($items as &$item) {
      $item['content']['#title'] = array('#markup' =>  $item['content']['#title'] . ' <span class="material-icons" aria-hidden="true">' . $object->field_icon->value . '</span>');
      $item['content']['#options']['attributes']['class'][] = 'cta with-icon';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * Adds a form id based template suggestion for all forms.
 */
function ashlar_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Suggest template for error pages
 */
function ashlar_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Get Request Object.
  $request = \Drupal::request();

  // If there is HTTP Exception..
  if ($exception = $request->attributes->get('exception')) {
    // Get the status code.
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, array(401, 403, 404))) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views summary template suggestions.
 * 
 * @inheritdoc
 */
function ashlar_theme_suggestions_views_view_summary_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__summary__' . $variables['view']->id();
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 *
 * Adds classes to menu links. This cannot be done in Twig templates without
 * using Drupal specific extensions.
 */
function ashlar_preprocess_menu(&$variables) {
  _menu_links($variables['items'], 0);
}

/**
 * Helper function for adding classes to menu links.
 */
function _menu_links(&$items, $menu_level) {
  $current_path = \Drupal::request()->getRequestUri();

  foreach ($items as $item) {
    $classes = ['menu-item'];
    if ($item['is_expanded']) {
      $classes[] = 'menu-item--expanded';
    }
    if ($item['is_collapsed']) {
      $classes[] = 'menu-item--collapsed';
    }
    if ($item['in_active_trail']) {
      $classes[] = 'menu-item--active-trail';
    }
    if ($item['url']->toString() == $current_path) {
      $classes[] = 'menu-item--active-page';
    }
    $item['attributes']->addClass($classes);
    if ($item['below']) {
      _menu_links($item['below'], $menu_level + 1);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for pager.html.twig.
 *
 * Removes specific attributes from pagers. This cannot be done in Twig
 * templates without using Drupal specific extensions.
 */
function ashlar_preprocess_pager(&$variables) {
  $keys = [
    'first' => ['href', 'title'],
    'previous' => ['href', 'title', 'rel'],
    'next' => ['href', 'title', 'rel'],
    'last' => ['href', 'title'],
  ];
  foreach ($keys as $key => $remove) {
    _remove_attributes($variables, $key, $remove);
  }
  if (isset($variables['items']['pages'])) {
    foreach ($variables['items']['pages'] as $key => $item) {
      if (isset($item['attributes'])) {
        $item['attributes']->removeAttribute('href')->removeAttribute('title');
      }
    }
  }
}

/**
 * Helper function for removing attributes.
 */
function _remove_attributes(&$variables, $key, $remove) {
  if (isset($variables['items'][$key]['attributes'])) {
    foreach ($remove as $attribute) {
      $variables['items'][$key]['attributes']->removeAttribute($attribute);
    }
  }
}

/**
 * Implements template_preprocess_ds_entity_view().
 *
 * Adds the entity and possible contextual links to PatternContext when using
 * UI Patterns Layouts module.
 */
function ashlar_preprocess_ds_entity_view(&$variables) {
  if (isset($variables['content']['#type']) && $variables['content']['#type'] == 'pattern') {
    $variables['content']['#context']['entity'] = $variables['content']['#entity'];
    if (isset($variables['title_suffix']['contextual_links'])) {
      $variables['content']['#context']['contextual_links'] = $variables['title_suffix']['contextual_links'];
    }
  }
}

/**
 * Implements template_preprocess_form().
 */
function ashlar_preprocess_form(&$variables) {
  $form = $variables['element'];
  if ($form['#form_id'] === 'user_login_form') {
    $variables['show_manual_login'] = (bool) theme_get_setting('show_manual_login');
  }
}

/**
 * Implements hook_form_alter().
 */
function ashlar_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  $form['cas_login_link']['#title'] = 'Universal Login (Western accounts)';

  if ((bool) theme_get_setting('show_manual_login')) {
    $form['name']['#access'] = true;
    $form['pass']['#access'] = true;
    $form['actions']['#access'] = true;
  }
  else {
    $form['name']['#access'] = false;
    $form['pass']['#access'] = false;
    $form['actions']['#access'] = false;
  }
}

/**
 * Helper function to pass views pager info into views-mini-pager array.
 */
function _get_view_machine_name ($machine_name = NULL) {
  $variables = &drupal_static(__FUNCTION__, array());
  if ($machine_name) {
    $variables[] = $machine_name;
  }
  return $variables;
}

/**
* Implements hook_views_pre_render().
* Gets pager name to pass to views-mini-pager.
*/
function ashlar_preprocess_views_view(&$variables) {  
  if (!empty($variables['pager'])) {
    $view_pager_theme = $variables['pager']['#theme'][1];
    
    if (str_contains($view_pager_theme, 'views_mini_pager')) {
      _get_view_machine_name($view_pager_theme);
    }
  }
}

/**
 * Implements template_preprocess_views_mini_pager().
 * Adds variable pager_name to use for nav aria-label.
 */
function ashlar_preprocess_views_mini_pager(&$variables) {
  $variables['pager_name'] = _get_view_machine_name();
}

/**
* Implements template_preprocess_breadcrumb().
* Adds current page to end of breadcrumb navigation. See https://www.drupal.org/node/743366, and 
* https://www.drupal.org/node/743366#comment-11619361 for retiring node-based solution.
*/
function ashlar_preprocess_breadcrumb(&$variables) {
  if($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $variables['current_page_text'] = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    $variables['breadcrumb'][] = array(
      'text' => $variables['current_page_text']    
    );
    $variables['#cache']['max-age'] = 0;
  }
}
